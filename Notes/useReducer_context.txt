Reducer to funkcja przyjmująca 2 argumenty
- poprzedni stan
- akcje opisującą zmainę w tym stanie

w rezultacie redukuje do nowego stanu ktory uwzglednia zmianę
opisaną przez akcję

używamy do złożonych stanów

const [state,dispatch] = useReducer(reducer,initialState)


reducer - state handler
state - stan zwrocony z reducera
dispatch - funkcja przyjmująca akcję przesyłaną do reducera

akcje są najczęściej obiektami


example

mamy jakiś initialState

następnie definiujemy typy akcji dla tego stanu
np const toursActionTypes = {
    toDelete: 'DELETE_TOUR',
    tours:'UPDATE_TOURS'
}

etc...

a następnie piszemy funkcje

func toursReducer(prevState = initialState, action){
    switch(action.type){
        case toursActionTypes.toDelete:
        return{
            ...prevState,
            toDelete: action.payload
        }
    }
}

action.payload jest setterem

do dispatch({type: personActionTypes.toDelete, payload: true.toDelete })




useContext pozwala korzystać z Context Api w komponentach funkcyjnych z pominieciem
komponentu Context.Consumer i wzorca render props

Do wywołania useContext przekazujemy obiekt kontekstu zwrócony przez
React.createContext()

useContext(MyContext)

example

export const ToursContext = React.createContext()

const initialState = {
  loading: true,
  tours: [],
  toDelete: false,
  txt: 'TestMemoKomponent',
};


export const useStateContext = () => React.useContext(ToursContext);

